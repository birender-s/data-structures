package com.example.java_lib.misc;

//https://www.hackerrank.com/challenges/morgan-and-a-string/problem

import java.io.IOException;

/*
Jack and Daniel are friends. Both of them like letters, especially upper-case ones.
They are cutting upper-case letters from newspapers, and each one of them has his collection of letters stored in a stack.

One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made of those two collections. He can take a letter from a collection only when it is on the top of the stack. Morgan wants to use all of the letters in their collections.

As an example, assume Jack has collected  and Daniel has . The example shows the top at index for each stack of letters. Assembling the string would go as follows:

Jack	Daniel	result
ACA	BCF
CA	BCF	A
CA	CF	AB
A	CF	ABC
A	CF	ABCA
    	F	ABCAC
    		ABCACF
Note the choice when there was a tie at CA and CF.

Function Description

Complete the morganAndString function in the editor below. It should return the completed string.

morganAndString has the following parameter(s):

a: a string representing Jack's letters, top at index
b: a string representing Daniel's letters, top at index
Input Format

The first line contains the an integer , the number of test cases.

The next  pairs of lines are as follows:
- The first line contains string
- The second line contains string .

Constraints

 and  contain upper-case letters only, ascii[A-Z].
Output Format

Output the lexicographically minimal string  for each test case in new line.

Sample Input

2
JACK
DANIEL
ABACABA
ABACABA
Sample Output

DAJACKNIEL
AABABACABACABA
Explanation

The first letters to choose from were J and D since they were at the top of the stack. D was chosen, the options then were J and A. A chosen. Then the two stacks have J and N, so J is chosen. (Current string is DAJ) Continuing this way till the end gives us the resulting string.
 */
public class MorganAndString {

    // This method works for 5 test cases but times out for rest, performance optimization required
    static String morganAndString(String a, String b) {
        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder("");

        while (i< a.length() && j <b.length()){
            if (a.charAt(i) < b.charAt(j)) {
                sb.append(a.charAt(i++));
            }
            else if (a.charAt(i) == b.charAt(j)){
                int counter = 0;
                while ( (i+counter <  a.length() &&  j+counter < b.length())
                        && (a.charAt(i+counter) == b.charAt(j+counter)) ){
                    if ((i+counter+1 <  a.length() &&  j+counter+1 < b.length()))
                        counter++;
                    else
                        break;
                }
                if (a.charAt(i+counter) < b.charAt(j+counter)){
                    sb.append(a.charAt(i++));
                } else{
                    sb.append(b.charAt(j++));
                }
            }
            else {
                sb.append(b.charAt(j++));
            }
        }

        if (i>= a.length())
            sb.append(b.substring(j));
        if (j >= b.length())
            sb.append(a.substring(i));

        return sb.toString();
    }


    //this method has bug, planned to use in above method to optimize while loop in above method.
    static String combineSameStrings(String a, String b){
        int i = 0;
        int j = 0;
        StringBuilder sb = new StringBuilder("");

        while (i< a.length() && j <b.length()){
            if (a.charAt(i) < b.charAt(j)) {
                sb.append(a.charAt(i++));
            }
            else if (a.charAt(i) == b.charAt(j)){
                sb.append(a.charAt(i++));
            }
            else {
                sb.append(b.charAt(j++));
            }
        }

        if (i>= a.length())
            sb.append(b.substring(j));
        if (j >= b.length())
            sb.append(a.substring(i));

        return sb.toString();

    }



//    private static final Scanner scanner = new Scanner(System.in);


    public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
//
//        int t = scanner.nextInt();
//        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//        for (int tItr = 0; tItr < t; tItr++) {
//            String a = scanner.nextLine();
//
//            String b = scanner.nextLine();

//            String result = morganAndString(a, b);
//
//            bufferedWriter.write(result);
//            bufferedWriter.newLine();
//        }
//
//        bufferedWriter.close();
//
//        scanner.close();
//
        String str1 = "LOORNWJRJREICBWVDVNXXODYQMUQODUUOQROUEXYBZTPHRYUIWBQCSJHWSIIKENEJCTNWLRYXGKVDVFTKSEZAIDHPWDPWJOVRNOBELKRZTRBLSTFBDWRQONNMEXLWPLCYQGIGWXMYAUODPWCEOTIVKWBDTLVFERDRYJXOQXUDNPKROAMAJMPCQSHZTJTURBXTYKEDFTFSNJTNEYUPHNXLOSFLGJCCKGBJIBRVLFKENOEQJKPSXQMDKJWBNLANODXWRCLUVKBMYEJQONDEMHGBYDCMPHRZHTFKTXJUCJMUGSVTHOJPTGTHPNFJPDIYWMQJRGNSCVNPKCBKHQDABJGFHAZOMGOPLBPKLKZCGDVWQGXHKOWYJWAZNVVIXWBJLHYUQFAAOZVWXGXAOCFHGIPJAZGCVLLZWOKOSRUJHEAHFGNVRBEIRHBKSNXJRKBZMSGPDAHTBLHLRSSTTMFSCRCUSIYJQAPFNGERMIGEPFGIYGIPWIVFNUTMRWDIQPNJDUAPKLQLZNUJTJZGEWBGJBNWBMRSUCUNGBBHEJLWNQRGFBDGBIFOISQQUNPQCZRQCKECFDNPBAKDDSWDBBOWOLVJQBUIZMYNODZRQFSJDGKDUIKHCCTIPUOHPVEEPXPGMXOUCVXSHHTFLXDLTKWHCZFYBJPBPRWDNEAVLOBYLFMUNCUEUAJMDXLSQHQAIKUSBOYILXYPDDXFTXWRGSLXWHSLUAXGHIUFGAOPHADWCPSESCOWRZLRSVLOTNBGLBSBVLBCSOCIUDLHEFDDCYPWGCSWSYHKNXDMOFQTZLFSWMABGGWSNCAFZVNFPGZJERHSKLBWKGFMEVLFEMPDZWXPSGNLTQQXHHMEESHPGDQGSEHQRPZNBESZCQZWKVIFFBJUKZCYHXBULVPTJNCBPVVQOIFUZSQWNJMUULCVFXENZSVUPSQATJPATMFKAKFAOHWJAFJAXXXELSJEWACUNCXSEMCQHFVOBTLCIJZLLDBYUWNCLAUFXUXTVYECIKKVLLDAAAWIPUPLGYLYFKBNHFFNTQYTHJVCQUBHKBLDKXDFXULXJEWHZUKGQBMZLYRJTWAYANDNJYTYJQUSAERSJTHRPLOVQPUNILKXILSQZMYQOPFPHKOTLZXUUUBRYULJCSVDVVQODQECCSIVZUDEIBOZKKALFHSTFDUAWONAXQJWTTPZJLPTLYYAMAJSIDUIWTLGFXZBRHQESOSNMVBOKUGYHCUNZPYTEINQBDQUYDUHUAJMYWPQACNSLZETAPSGGUKAOVPTYZTEJVIXOQVDFWAJCURPPVDGRZIWECNHLARNQCMWWBTRJQDBHWHYAETWEAWOOAMFEFDXIALANCGVTMGLNGNPAICEYNQPWSUFLYJDLDMSJVFHLZCOBCQMRENDEDPVDRRSTUDOYEAWRWMZQFVZQTEVILRWNUESJLXBNVBAJTLXVNRNEEEUSBZBSPNOQILTKQAZAFDHCIKCSEDMPNKTLSWFZNRICOCYKPDACQMJANJQAZVDFRLGGWHJIJTKHCPCPGQUNKZALQDBOVNXGWIFBSKUEVGSYCBJXAUAIWFJMQXFNMVUISBBHCSXDSBJZMRGGEYMAURZVFOCEYJUEFHLKVULNRVANANMFSWMUINWYOBHGFAHGCDHBOSUMEQMSYPMIXLYREFSTUGMDRPMVQFWIKQYWUCZDGTQIFRDFMMPEAVZTBSMJFNWAONPWSEMTJAENYSCMFGBGHOVDVPEOXMYVQVCPLISTLJDZFASNRNLVPYDVHVYZRPVXDTDRADPXQQLNNJBTMUTYVBMPHLCYPGIHPZCXWQQZVRKXMBUBSKTFOELKDCGKFIKMKFWQXFUYRJFUPLEFBTEOKOYYUPOWDJXJVUPKWJWRSHYNPKVEDXQGOVECQVJAKHXFQFLMOWCRTZJKJBSULGYJCRCOXQKYKITWYEOKCFSBWPKDYGGVRDGOTDEXTXQSSDEOEVNZHPLZLYTKZJQKRDGAXUKXOMFSBVPUTPLJVADLLOJHOZCXJKYLWKFPDHRGQZFZIOLJXUEUQDLAYOEILKQQIWDSGWCWXGCENFLDWQEIJCTDIVWYQMFWYDOFFAVSPAZVPGHNLPIYNUBOVNRICYADURELESROSQZNARTXXVXMFRJNYYRJLQVVZGPLTKBUMMKUCJKJULGHGFFDFZSKFEECYRXEWDFIYRVPDFHLPTDHCNMRROZNMILQAXMWKRZBXKXOHZX";
        String str2 = "CYTVMLVBRWPTOWMCFOORZOFHBDKCZNSIBTZQSZZEWPVIGIQFKRNSRLSRDJVMTCSOSGLDSOUEFBFPQZVFAGLTICURYIHPLMHAVSUTSLWNBOGXAIOVKZOWEAXGDIMSRXDCFNPFDSXKSFJZNUPGNKUOCXGIPNXQFWHWWNVIDVCTHCEXMOOCOKPVSPFXDRXMCCEFTLOHITUBFTQIBPJGGQPOOLKLBAWJMXKTNMKZWJEKNQAFBNQGJNJIKIHSORPURNXFOTJLTEQOKKDZOBOKSQVSQOXKLJFBPRLMPOMGNHOJGWFCEFEMENLUIRZHNJUFOPQIBNVLGZMFSZSSUPYCJXWIDIILPZJGOBHXDREZTIGYRHNKWAYWMQBRRZAQJXNTQEYPQTKEKALUEUOZTGMKOJFEYJTOSLSSSJDWPIUXBVAKYLTCWKOWGJKCFWRJLIPOCWVGBELBBPNMDFIOGIFKDMNSRGXXDVNBXBEVKJWHCQSXQBKZMYAGQLLQCQOZDTBAWFMFFOJRDIJXNXUJUZBGEMQQBRZBPPMLXCGGVHWRBYMIGHTTBOJYFDNPMDGMANOBTPETVHAACEMVVMDWHFZGKEXWTCDAVDNNULIVGJGAYOXGRFFHUMWYMFNOXNMGXZMAQXNQIDZJCJPSMCICSGUBWCHBSYHCBQMLWOTJMKGGQARGYXQAGRDPZSXCRXVKYFSVWVGLZQBCOTLORFWMIQXHDKWSPVTEWVPRTJTICIFPEWBIBNHXZDVFXWVEOJINMALTUBODEPOEMREGNHLRKKTQYGJWUJECPCEJTSRIBTLLUTMARCTDKELALYJYOBTIQEHEGINNSOPFXTHYSZIBSQYNZGJNCUTOOHOMCMYKAVCRNLCGZYNYWYMRQMYSEATIFKJVVUEROHAUWTDQLLSHBUBUHJBIOPOCAXCSHIFOBGJAOSYSBDCLBLGGTUQCWFRYMQKTOLEZFHTUDLKHFBIXGFRDNVEDKYQHOOIRWWTYPSIFOGDICBAXWLAPOEMIRRHIHQDHHREPSAKIJDJVCKJMWZKWQNIDDLIDEQNMQOOSTMHNQKHFRXVIWVNLIKLWCLQFDSNPRQTPTAFKXYJSNCVECOFJMHCIQWFEPLGVKFPPNFYISORPIDMJQGYQUPRTFGTQDUGTTEPSNHIMFUZQXLLWCCLZQCFWILVYXYMGWXDLSYRRJOSGWZLZLTMNOPLDHEZGCDBJSERIHFUUCJAHJXYDJBHWDVWPUBZVYPZHNQCKDVBVABPXWGJBGKNRHQCEHOXJPFXVLRAXTLKCPOYUYAKSQWOSJPPXMSIWUCEUYOPODFOIFXTGNXCRFWUBSKJRTNJEICPHQXLQETUSVVOTCRWZZPKACEFDRZTFRZQARQLZVWKVDAMVQGOWIPEXSGDQCYWVJDXSOLBLDLFRNGRKWGLAVQKCQDRPEGUSOYKNRCTSDZEPTWBKTJAZGKDNOYYVWBBHJSAEENUSEYWDZDNIJJATPSNCRNXHHACCBOVJNICHIKWXQHBONOJLNLENCOHAVJSEEFTJEHATCQYIIWFLFVKEJVFMTFHZBWARONHVWMQLTIGMMFUHVAGPTWURDZVRBUOSSMISLZMCBPFNFEWVPQDBGHLGRQVIBLAFQYRFVGOQNIESKZZPMMILQZFYWJCXYLWJXJUBWUEENLCWZVECMKCFWUGLVNVQSTQNWHSJWDTXOZEYJPBBREBMGSCYTMBMGEZHZNUGCFGFOQGLMVAOJZCRXVTJEKXLZKCWPBSRAFFLRTBGTTBZGCADYYRFHAHSQRYFFKBRWTTVMTAQHVCCVNVEZIVUTXKUEEFWKJONYDTBRGNZYMMBKNKEAHADPJLKTKXRNQYAMLMPXQJADLQAODCCABMVQLIJMBSPDUZDNRQHMCEFVCYFAXYNSTNIRQQIPRZFOSIIHBBXFZBZYHAKBYYUOGLKUGMAABFZTSZCCRPFPHRYUJABSOUIZCSHKDGGLRLDDKTKASHXSRAZGREFPXSEEPZPYMFRUBVVPRHJVLNPLDMQVHRRHETDXLPGMIEGYEBKQLLLPXBFNGRDHJVFCQLRHJKWSRRIXVBSWFXFUJULLFJDPXYYKKEGQKEOPYVPTYIOAKJPRKQHYUMKFWHYXQTLBAZZDVDHCJACTMVOWOPXKEQAKPICVGHAFPBJDDBFYGVJMGTJPAGBANIWGGESXFHQTUGDCPUXOUABSUTFZSDUKLBJUFBRLMKDRLJJSDRQEQVCIJLVWACUMNLDJBNFYXMCGSHSGZSXCSWYMYPNDRAKMETYRMFEXNJNUMIONMUMSQBXZPXXXVPRQTRTSENEIRKHPUOKMDYCIVNZEUUUNVVXFMSWZWNDGDTJTMDAKISZTGXICIBWAOFPXBPVWLPBWNSIOMOSAEZEBDIMGKELKWTGRHVLYTRQZIBJPBBIFFAIFMIFSMAMLJRGIDMUVKAUUBLLCJEWZUKIGNUDBZRJMVVJSMCBTBXDGEHFJPQUZYWZTBFAEWOHWTJNIMTYSWGKINKOQCHAQLAIFHRUGNWQOJLWQJGGJSRVIVQJZKFKQQSEUBGWCMQOCVVTBEPHFCANDDEHDXAIGLXFNZNUKMCMFDEZHBNAESNIQSTBQVVQOMUUSSYHRAXGJDTOINYOAUNRFMFZWJBVRROPVDNPAQQWYXPLPPJMZIUYDNPMPXFXPYGPBKCFMXXDUMVBOXJDLLKAGWICVZLXWHGQOHBXSIDQVCUORUCOPDWYGSQSADANLXZHZWFCZRPGNZPDLCNALUGGOXGYZFLAUXKKZMOXIYJMDQLQFQBSFISAXPTRYXOCKXJARQMYRSGIZRJNXVBDZTLSBMRLJQTGTJABMSGVGMDBJYXRXBRDRDJZJUFCAKLVHNUAOYTKLSQJEZVGZKYNIHAYAPEJZRTRLFVCACJNROOHIYAFANDPUJVILCCXNMMGVRDQGNVLABCHQNOIRNIOTZWIFKYRWTTIAMSZGMULJSPMGZQTYGUMTMTWLLPKCINLOFOCEXFFDYLSTQUUJVCGYEHDGXEDTSXJSMRWXLMENTPSOMKNLUYIRLGUUGCRFKJSJHZPVWVXWFSCXLQSIGFJKDUJAUBIASJGXKSVBKUSBHONJUIYJGAVJUQJVNVQPIATNRMDKIYESQEUBKJRXOBXWEUOVWBMEHEMASZXLUHHSDXCFNIUOFZYNMGTQEMMHWKSHKVJDFXOSUVYZQFXDNXVKOCIRPBLVBEHNZQMMTLBITHBMJOANCNZYQDQOTNZFEWOSMWWHWHNHJSEXWXKLDGDLGPHYEGLLQPVFWLWKBHCHPKIWIOLCFJQRDSRKQIHELTFUVIJPBBWLTCOWICSDBGWKUBEUPCASJUSJMLICIIZVZPPJEXGVLKKWHCEJOPDTVCXJLSNIIHHZAJGEMMPWJSWQHFLMNYFEUXYZRECDEVEKTJFFNZXRKFHWKVHWPGTHKQZXJICBOAEYUKPBTOYNFFGOWOYUHLOXJKSOJZQCVDTUUPQHOGICXTGWYAKBXOVJOHXJLLLWNDYSQIPNPNDRQMRQSKOEUWLETHQTYWOIKMVGARSNJDHYUOWDFMMZYHTNQMJZLGTXZYDTMYGOECQXOEGBOEVRVOGKMQMCAMMJFCWLPWGCOWEQMPGCQLXRHEDUMCWSSEALYQEHUHLVTIUBTKJYGJZHARCDUWVORRMCCWMJLHKZWVTLSHWJHWXUEWQLAMGROJLCAEQEFXEEOVRUPGYSJBUSKKNWHRVAKPREEKOJYQISLEFTRUIBADHBJZYPDVWADONXJBKSHBVNHSNNSUDYKNWGSMFIVKYRBSSLJPFSNHAQRTYFFJQJNYIYTCZSNJVSDGZQOGCSMYMBAYCMXWUAXBARUZLGNZCGKXESZFRJKJYEIYSWWJCTSLUVOQMNERECIUHZQDWOWVGWFKWUEBJAJDMUZKSOVLHPAHVWOOTSPSXETAERCVRKSXLRGLPFEOVJBHTDAXWCBATQRQMOTVPXRXCBKOYLNRKZXJWGDNAQZMDZEGGCXEDFHXRUPYISDYMEQXHDADADTWZFAPKGDRMLKNQKQKZWEEJNXOBXGTQKSSCQXKGEXMMBOAFNRDFJQAZVRLLORLPVFIMFCYKDUUMGUQPGNXPMWJGSEURPBDMXAPRSXPCUBIHURHQCQQGZBRMJLKJFGYLSUEMHULGFQIYJUWXFJHRKJAKLWKKXOIPUFKVGOELCMPGZQVQFHVQPWQKLUOMWPFQHPLSXICVIBWWDLTMFGBOUZONEUPUINAYRQGDSMWPBJXHBXADVFPNEVXHPMUSSVZRZGUWHIRFMLJCUASHUUMQXLQNZGNZWBWBJFGMLHMGOSFCWSUCHZZLFMZDSZBDCRDOEWKFICHODDRCDOWKYXOHMDVHTWDPUSBGVKKTSNMSQOGBOSYZYPCZMKXODNYKPZNZHKIFRODNXPZBPGGJWASCZLHSQJBNBEYPXSUAYSZJWBTTWDWITIRFDKHCDWCNUFKMPGPXPVTMJDPTJYXGYFDBRRBYMDFTWMESMAUGIPCGGKPIAJELWUHZLAPMTBXMHEDJTDTYRLGVOGTSDWCZIEKGJVOKAQHVYERBFMPIKYJTXJOIYKBNKAOXWXQGVZSFLUUILEYJMABGWCRDGFLHJAGXVYEZXGSLVEJTVMBZYLHJKRROJDOAGYRFOYKJGDGQJRJQUYTKMLPXIDBNNHWKRFBJCIIRTEFECLLOEWVVRFRIHFNURYTCZMFIXXBHNZVIHKGQRISHGESFBBROKWDCCBSMSTJRPWFGUITWNNELZCQXTQGSYXJMACAULGKUMOORIJJBEEZARDLCOICSQOLUAMCMBSICUOLLPNWABEOPNQEXPCJAMTLNJMVPZKIMEGEPXQOJUPYRFGLQFDZVYZIIHQZIDHENDWGAAIMOEPIQRVUZIRHSLFKPATLWDLIROCGRGJGJMXJCFXEQDSQKRETQUGALYCJLOCWBGNDMUIJKVWRDXJJTTZIMGHOLNXDURKFTOCXZPNXIQHHAJVAQWPRORAUZAMIMAJHUITCIIUENUXQDAAERLJIIPSDWEBPRKQRLQQPQGPORBUYUYFITNGGKQYMASYGVMBAVXVSSIVAXBUANQSAGCTPMQKHRKNDMVUQBJXZIBFRJRGNQBARZJUJLSNTYLYVNCZNUYTYJYNLIDAXXOOOHAOZJPQXCHGCNCKYBMPBJLLRLCYEUCOTPLXFFZVBKZPYSDTJTVPPHVWUPBYSFKDBMAPZBGIQOAHZNBRWWLUZHFNWRRSMZJFZRERBKTSXRLIAZMUIZIUZQQJOGBSWGDCLJDEKGGOUVGPRWLXMHRXBCMUTXTECRBTCFEEQJYQSHAVIJONQHSYHPAWFRWOPUUZTAOHRJQFIHXAGWGGHPLMZDQMVXOEDWGTNJQWGSQLECRFVDMBYMXBCOUXAHDWOTELCBPVTKPUDHMSZCLIJQYFWMQTYTBAGJBFPUPGONCOIBGRTDMIHQHXTHHAIWPTAKYKNRJKIFKDYFERNYKWPJVBMBPELIFBOHQTCMZMPEQFXYKUHCHOUGYORGHRDHIMQFKRHQPMJSRMYDET";

//        String str1 = "ABACABA";
//        String str2 = "ABACABA";

        System.out.println(morganAndString(str1, str2) + "\n\n\n");
        System.out.println("Done !");

    }
}
